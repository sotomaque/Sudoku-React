{"version":3,"sources":["Components/Banner.jsx","Components/Tools.jsx","Components/BoardRow.jsx","Components/Board.jsx","Components/GameInfo.jsx","Components/ConsoleRight.jsx","Controls/NewGame.js","Controls/NewEngine.js","Components/Settings.jsx","App.js","index.js"],"names":["Banner","className","Tools","solve","solveEnabled","newGame","loadGame","loadEnabled","handleShowCandidatesClicked","showCandidates","startOver","startOverEnabled","markThisCell","markThisCellEnabled","showAlert","saveGame","onClick","disabled","BoardRow","handleChange","handleFocus","cellValues","cellBackgroundColors","id","tr_className","parseInt","map","elem","eKey","value","num","getValueOfCell","bgClassName","getBgcolor","tdclsName","key","type","name","onChange","e","onFocus","Board","style","display","justifyContent","toString","GameInfo","gameId","gameDifficulty","complexity","numberOfEmptyCells","cName","aria-hidden","ConsoleRight","gamesWon","hintsUsed","candidates","game1","difficulty","str","game2","game3","game4","game5","game6","game7","game8","game9","game10","game11","convertIdToIndex","getCubeIndex","row","column","Math","floor","getAllCellsInfo","count","objArray","g","index","division","remainder","cube","convertIndexToId","push","candidateValuesById","candidateValuesByRowColumnCube","known","getKnownValues","_","difference","knownValues","allCells","knownValuesObj","cell","obj","getGameInfo","filledCells","emptyCells","length","cells","solveAlgo2","allCellsWithCandidates","foundCells","ref","res","refValue","storeObjArray","foundCellsObjArr","undefined","candidate","numb","detail","constrainedBy","checkCandidiatesDynamically","Settings","highlightCells","setHighlightCells","prev","App","React","useState","setSolvedEnabled","setHintsUsed","Array","fill","setCellBackgroundColors","defaultColors","setCellValues","setGameDifficulty","setGameId","setComplexity","setNumberOfEmptyCells","gameActive","setGameActive","idSelected","setIdSelected","possibleValue","setPossibleValue","savedGame","setSavedGame","virginGameId","setVirginGameId","initialEmpty","setInitialEmpty","consoleMessage","setConsoleMessage","setGamesWon","setMarkThisCellEnabled","showConfetti","setShowConfetti","piecesAdded","setPiecesAdded","gameObj","stArr","sample","getFirstValue","newArr","split","pop","resetColors","saveVirginGame","colors","blinkCells","arrayOfIds","color","colorCells","colorThese","setTimeout","changeCellValueById","newCellValues","colorConnectedCells","showCellInfo","getGameByDifficulty","desiredDifficulty","easy","medium","hard","loadGameByDifficulty","setStartOverEnabled","useEffect","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","gameOver","isGameOver","error","notify","message","setShowCandidates","algo1Results","minFound","results","forEach","temp","solveAlgo1","algo2Results","desiredId","filter","getGameById","console","log","confirmAlert","customUI","onClose","margin","cellsFormatted","arrayOfStrings","getAllCellsInfoCellsAsCSV","oldCellValues","target","indexOf","validInput","idsInConflict","idsOfConflictingCells","conflictingRowNumber","conflictingColumnNumber","getIdsOfConflictingCells","showFound","piecesFound","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c5a7a20.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Banner = () => {\r\n  return (\r\n    <div className=\"any\">\r\n      <section className=\"section\">\r\n        <div className=\"container\">\r\n          <h1 className=\"title\">Sudoku</h1>\r\n          <h2 className=\"subtitle\">\r\n            Built with React\r\n          </h2>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import React from \"react\";\r\n\r\nconst Tools = ({ solve, solveEnabled, newGame, loadGame, loadEnabled, handleShowCandidatesClicked, showCandidates,\r\n             startOver, startOverEnabled, markThisCell, markThisCellEnabled, showAlert, saveGame }) => {\r\n  return (\r\n    <div className=\"tools\">\r\n      <div className=\"buttons\">\r\n        <button className=\"button is-link\" onClick={solve} disabled={!solveEnabled}> Hint </button>\r\n        <button className=\"button is-success\" onClick={newGame}> New Game </button>\r\n        <button className=\"button is-danger\" onClick={startOver} disabled={!startOverEnabled}> Start Over </button>\r\n        <button className=\"button is-primary\" onClick={markThisCell} disabled={!markThisCellEnabled}> Mark This Celll </button>\r\n        <button className=\"button is-info\" onClick={showAlert}> Select Difficulty </button>\r\n        <button className=\"button is-success\" onClick={saveGame}> Save Game </button>\r\n        <button className=\"button is-warning\" onClick={loadGame} disabled={!loadEnabled}> Load Game </button>\r\n        <button className=\"button is-primary\" onClick={handleShowCandidatesClicked}>{ showCandidates ? \"Hide Possible Values\" : \"Show Possible Values\" }</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tools;","import React from 'react'\r\n\r\nconst BoardRow = ({ handleChange, handleFocus, cellValues, cellBackgroundColors, id }) => {\r\n    \r\n    let tr_className = \r\n        parseInt(id) % 3 === 1 && parseInt(id) > 1 \r\n            ? \"square-sep\"\r\n            : \"square\";\r\n        \r\n    const getValueOfCell = (id, elem) => {\r\n        let num = (parseInt(id) - 1) * 9 + parseInt(elem) - 1;\r\n        let cellValue = cellValues[num];\r\n        return cellValue;\r\n    }\r\n\r\n    const getBgcolor = (id, elem) => {\r\n        let num = (parseInt(id) - 1) * 9 + parseInt(elem) - 1;\r\n        let cname = cellBackgroundColors[num] + \" squareinp\";\r\n        return cname;\r\n    }\r\n\r\n    const columnArr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n   \r\n    return (\r\n        <tr className={tr_className}>\r\n            {\r\n                columnArr.map(elem => {\r\n                    let eKey = id + elem;\r\n                    let value = getValueOfCell(id, elem);\r\n                    let bgClassName = getBgcolor(id, elem);\r\n\r\n                    let tdclsName = \r\n                        parseInt(elem) % 3 === 1 && parseInt(elem) > 1 \r\n                            ? \"square-septd\"\r\n                            : \"square\";\r\n\r\n                    return (\r\n                        <td className={tdclsName} key={eKey}>\r\n                            <input \r\n                                id={eKey}\r\n                                key={eKey}\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                className={bgClassName}\r\n                                onChange={(e) => handleChange(e)}\r\n                                onFocus={(e) => handleFocus(e)}\r\n                                value={value}\r\n                            />\r\n                        </td>\r\n                    );\r\n                })\r\n            }\r\n        </tr>\r\n    );\r\n}\r\n\r\n\r\nexport default BoardRow;","import React from 'react';\r\nimport BoardRow from './BoardRow';\r\n\r\n\r\nconst Board = ({ handleChange, handleFocus, cellValues, cellBackgroundColors }) => {\r\n\r\n    const simple9 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <hr />\r\n            <div className=\"card\">\r\n                <table style={{display: 'flex', justifyContent: 'center'}}>\r\n                    <tbody>\r\n                        {\r\n                            simple9.map( elem => {\r\n                                return (\r\n                                    <BoardRow\r\n                                        key={elem}\r\n                                        handleChange={handleChange}\r\n                                        handleFocus={handleFocus}\r\n                                        cellValues={cellValues}\r\n                                        cellBackgroundColors={cellBackgroundColors}\r\n                                        id={elem.toString()}\r\n                                    />\r\n                                )\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;","import React from \"react\";\r\n\r\nconst GameInfo = ({ gameId, gameDifficulty, complexity, numberOfEmptyCells }) => {\r\n  const cName = (gameDifficulty === \"hard\") ? \"danger\"\r\n      : (gameDifficulty === \"easy\") ? \"success\"\r\n        : \"warning\";\r\n\r\n  return (\r\n    <>\r\n        <br />\r\n        <article className=\"panel is-white\">\r\n          <p className=\"panel-heading\" style={{ display: 'flex', justifyContent: 'center'}}>Game Info</p>\r\n          <p className=\"panel-subheading\" style={{ display: 'flex', justifyContent: 'center'}}>Game ID: {gameId}</p>\r\n          <br />\r\n          <div className=\"difficulty\" style={{ display: 'flex', justifyContent: 'center'}}>\r\n            <button className={`button is-${cName}`} >\r\n                {gameDifficulty} \r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"panel-block\">\r\n            <span className=\"panel-icon\">\r\n              <i className=\"fas fa-book\" aria-hidden=\"true\"></i>\r\n            </span>\r\n            Empty Cells : {numberOfEmptyCells}\r\n          </div>\r\n          <div className=\"panel-block\">\r\n            <span className=\"panel-icon\">\r\n              <i className=\"fas fa-book\" aria-hidden=\"true\"></i>\r\n            </span>\r\n            Complexity : {complexity}\r\n          </div>\r\n        </article>\r\n        <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameInfo;\r\n","import React from \"react\";\r\n\r\nconst ConsoleRight = ({ gamesWon, hintsUsed, showCandidates, candidates }) => {\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <article className=\"message is-warning\">\r\n        <div className=\"message-header\">\r\n          <p>Games Won</p>\r\n        </div>\r\n\r\n        <div className=\"message-body\">{gamesWon}</div>\r\n      </article>\r\n\r\n      <article className=\"message is-warning\">\r\n        <div className=\"message-header\">\r\n          <p>Hints Used</p>\r\n        </div>\r\n\r\n        <div className=\"message-body\">{hintsUsed}</div>\r\n      </article>\r\n\r\n      {\r\n        showCandidates && (\r\n          <article className=\"message is-warning\">\r\n            <div className=\"message-header\">\r\n              <p>Possible Values</p>\r\n            </div>\r\n            <div className=\"message-body\">{candidates.toString()}</div>\r\n          </article>\r\n        )\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ConsoleRight;\r\n","import _ from 'lodash';\r\n\r\n// easy games\r\nlet game1 = {\r\n    id: 1, difficulty: \"easy\", str: \";;;;2;3;;;;;5;6;;;4;;1;2;;3;7;;;;;;5;;;2;;;;;6;;1;8;;;;;;9;7;;9;;;;;2;;;4;;;;;;8;3;;7;2;;3;;;6;5;;;;;6;9;;;;;\"\r\n}\r\nlet game2 = {\r\n    id: 2, difficulty: \"easy\", str: \";;;;;9;;;6;;;;;;3;8;5;1;;6;2;;1;5;;;;;;7;;;;;6;;;2;1;9;7;6;3;8;;;3;;;;;1;;;;;;4;5;;9;7;;2;5;8;6;;;;;;4;;;3;;;;;;\"\r\n}\r\nlet game3 = {\r\n    id: 3, difficulty: \"easy\", str: \"2;9;;;7;4;;;;;1;;;;;4;;;6;7;;9;;5;;;;;8;;2;;6;;;;;6;;8;4;7;;2;;;;;5;;1;;8;;;;;7;;8;;9;2;;;6;;;;;1;;;;;4;1;;;5;8;\"\r\n}\r\nlet game4 = {\r\n    id: 4, difficulty: \"easy\", str: \"4;;;;9;;;7;;;;;2;;6;9;;;;;;;;7;;;2;3;8;;9;;;;;1;;2;4;;;;6;3;;9;;;;;3;;5;4;8;;;4;;;;;;;;1;6;;8;;;;;9;;;7;;;;5;\"\r\n}\r\n// medium games\r\nlet game5 = {\r\n    id: 5, difficulty: \"medium\", str: \"6;3;;;;;;;;7;;4;;;5;;;;;1;5;;4;;;;6;5;;7;;;8;;;;;8;;;2;;;1;;;;;5;;;3;;7;4;;;;6;;1;7;;;;;9;;;2;;5;;;;;;;;4;3;\"\r\n}\r\nlet game6 = {\r\n    id: 6, difficulty: \"medium\", str: \";8;3;;;2;;1;;;;;;3;;;;4;;2;7;;;;;;8;;;5;;7;;;3;;;;;5;8;6;;;;;6;;;4;;1;;;9;;;;;;5;7;;3;;;;1;;;;;;7;;6;;;4;9;;\"\r\n}\r\nlet game7 = {\r\n    id: 7, difficulty: \"medium\", str: \";9;6;;4;;;3;;;5;7;8;2;;;;;1;;;9;;;5;;;;;9;;1;;;;8;5;;;;;;;;2;4;;;;9;;6;;;;;4;;;3;;;1;;;;;7;9;2;6;;;2;;;5;;9;8;;\"\r\n}\r\nlet game8 = {\r\n    id: 8, difficulty: \"medium\", str: \";;7;;;;9;;8;;3;;1;7;;;;4;;;;;;6;;;;6;9;8;7;4;;3;;;;;3;;1;;4;;;;;1;;3;9;7;6;2;;;;4;;;;;;9;;;;5;1;;4;;4;;5;;;;1;;;\"\r\n}\r\nlet game9 = {\r\n    id: 9, difficulty: \"medium\", str: \";;;;2;;;7;;;;;;3;4;;;;3;5;8;;;;;;;5;;4;8;;;;;;;;;1;;;;8;9;;;2;;;;;;6;2;4;;;;;7;;;;9;;;;5;2;;;;;;;6;7;1;;;\"\r\n}\r\n// hard games\r\nlet game10 = {\r\n    id: 10, difficulty: \"hard\", str: \";;6;;;5;;;;1;9;;;;;;;;;;7;;1;2;;4;;3;7;;;9;1;;5;;8;;;;;;;;1;;1;;7;5;;;6;3;;4;;1;7;;6;;;;;;;;;;1;9;;;;5;;;8;;;\"\r\n}\r\nlet game11 = {\r\n    id: 11, difficulty: \"hard\", str: \"9;8;1;;;6;4;5;;;;;4;;;1;;7;;;;;;;;;;;;;;2;;;4;;1;;9;;;;2;;3;;3;;;1;;;;;;;;;;;7;;;6;;3;;;5;;;;;1;8;9;;;5;2;6;\"\r\n}\r\nexport function getFirstValue() {\r\n    var stArr = [];\r\n\r\n    var st; // string representation of our game\r\n    var difficulty;\r\n    var gameObj;\r\n    let id;\r\n\r\n    id = 15;\r\n    difficulty = \"medium\";\r\n    st = \";;;;2;;;7;;;;;;3;4;;;;3;5;8;;;;;;;5;;4;8;;;;;;;;;1;;;;8;9;;;2;;;;;;6;2;4;;;;;7;;;;9;;;;5;2;;;;;;;6;7;1;;;\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n    /* ---------- -------- */\r\n    \r\n    id = 1; //\r\n    difficulty = \"medium\";\r\n    st =\"6;3;;;;;;;;7;;4;;;5;;;;;1;5;;4;;;;6;5;;7;;;8;;;;;8;;;2;;;1;;;;;5;;;3;;7;4;;;;6;;1;7;;;;;9;;;2;;5;;;;;;;;4;3;\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n    /* ---------- -------- */\r\n\r\n    \r\n    // medium\r\n    id = 3; //  \r\n    st =\";8;3;;;2;;1;;;;;;3;;;;4;;2;7;;;;;;8;;;5;;7;;;3;;;;;5;8;6;;;;;6;;;4;;1;;;9;;;;;;5;7;;3;;;;1;;;;;;7;;6;;;4;9;;\";\r\n    difficulty = \"medium\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    // hard\r\n    id = 4; //  \r\n    st =\";;6;;;5;;;;1;9;;;;;;;;;;7;;1;2;;4;;3;7;;;9;1;;5;;8;;;;;;;;1;;1;;7;5;;;6;3;;4;;1;7;;6;;;;;;;;;;1;9;;;;5;;;8;;;\";\r\n    difficulty = \"hard\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    id = 6;  \r\n    st =\"9;8;1;;;6;4;5;;;;;4;;;1;;7;;;;;;;;;;;;;;2;;;4;;1;;9;;;;2;;3;;3;;;1;;;;;;;;;;;7;;;6;;3;;;5;;;;;1;8;9;;;5;2;6;\";\r\n    difficulty = \"hard\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    // easy games\r\n\r\n    id = 2;\r\n    st =\";;;;2;3;;;;;5;6;;;4;;1;2;;3;7;;;;;;5;;;2;;;;;6;;1;8;;;;;;9;7;;9;;;;;2;;;4;;;;;;8;3;;7;2;;3;;;6;5;;;;;6;9;;;;;\";\r\n    difficulty = \"easy\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    id = 7;  \r\n    st =\";9;6;;4;;;3;;;5;7;8;2;;;;;1;;;9;;;5;;;;;9;;1;;;;8;5;;;;;;;;2;4;;;;9;;6;;;;;4;;;3;;;1;;;;;7;9;2;6;;;2;;;5;;9;8;;\";\r\n    difficulty = \"medium\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    id = 5; \r\n    st =\"4;;;;9;;;7;;;;;2;;6;9;;;;;;;;7;;;2;3;8;;9;;;;;1;;2;4;;;;6;3;;9;;;;;3;;5;4;8;;;4;;;;;;;;1;6;;8;;;;;9;;;7;;;;5;\";\r\n    difficulty = \"easy\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    id = 8;  \r\n    st =\";;7;;;;9;;8;;3;;1;7;;;;4;;;;;;6;;;;6;9;8;7;4;;3;;;;;3;;1;;4;;;;;1;;3;9;7;6;2;;;;4;;;;;;9;;;;5;1;;4;;4;;5;;;;1;;;\";\r\n    difficulty = \"medium\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    id = 9;  \r\n    st =\";;;;;9;;;6;;;;;;3;8;5;1;;6;2;;1;5;;;;;;7;;;;;6;;;2;1;9;7;6;3;8;;;3;;;;;1;;;;;;4;5;;9;7;;2;5;8;6;;;;;;4;;;3;;;;;;\"; \r\n    difficulty = \"easy\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    id = 10;  \r\n    st =\"2;9;;;7;4;;;;;1;;;;;4;;;6;7;;9;;5;;;;;8;;2;;6;;;;;6;;8;4;7;;2;;;;;5;;1;;8;;;;;7;;8;;9;2;;;6;;;;;1;;;;;4;1;;;5;8;\"; \r\n    difficulty = \"easy\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    return _.sample(stArr);\r\n}\r\n\r\nexport function loadGameByDifficulty(desiredDifficulty) {\r\n    var easy = [];\r\n    var medium = [];\r\n    var hard = [];\r\n\r\n    // easy games\r\n    easy.push(game1);\r\n    easy.push(game2);\r\n    easy.push(game3);\r\n    easy.push(game4);\r\n\r\n    // medium games\r\n    medium.push(game5);\r\n    medium.push(game6);\r\n    medium.push(game7);\r\n    medium.push(game8);\r\n    medium.push(game9);\r\n\r\n    // hard games\r\n    hard.push(game10);\r\n    hard.push(game11);\r\n\r\n    switch(desiredDifficulty) {\r\n        case 'easy':\r\n            return _.sample(easy);\r\n\r\n        case 'medium': \r\n            return _.sample(medium);\r\n\r\n        case 'hard': \r\n            return _.sample(hard);\r\n        \r\n        default: \r\n            return _.sample(easy);\r\n    }\r\n}\r\n\r\nexport function getGameById(desiredId) {\r\n    var stArr = [];\r\n\r\n    var st; // string representation of our game\r\n    var difficulty;\r\n    var gameObj;\r\n    let id;\r\n\r\n    id = 15;\r\n    difficulty = \"medium\";\r\n    st = \";;;;2;;;7;;;;;;3;4;;;;3;5;8;;;;;;;5;;4;8;;;;;;;;;1;;;;8;9;;;2;;;;;;6;2;4;;;;;7;;;;9;;;;5;2;;;;;;;6;7;1;;;\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n    /* ---------- -------- */\r\n    \r\n    id = 1; //\r\n    difficulty = \"medium\";\r\n    st =\"6;3;;;;;;;;7;;4;;;5;;;;;1;5;;4;;;;6;5;;7;;;8;;;;;8;;;2;;;1;;;;;5;;;3;;7;4;;;;6;;1;7;;;;;9;;;2;;5;;;;;;;;4;3;\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n    /* ---------- -------- */\r\n\r\n    \r\n    // medium\r\n    id = 3; //  \r\n    st =\";8;3;;;2;;1;;;;;;3;;;;4;;2;7;;;;;;8;;;5;;7;;;3;;;;;5;8;6;;;;;6;;;4;;1;;;9;;;;;;5;7;;3;;;;1;;;;;;7;;6;;;4;9;;\";\r\n    difficulty = \"medium\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    // hard\r\n    id = 4; //  \r\n    st =\";;6;;;5;;;;1;9;;;;;;;;;;7;;1;2;;4;;3;7;;;9;1;;5;;8;;;;;;;;1;;1;;7;5;;;6;3;;4;;1;7;;6;;;;;;;;;;1;9;;;;5;;;8;;;\";\r\n    difficulty = \"hard\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    id = 6;  \r\n    st =\"9;8;1;;;6;4;5;;;;;4;;;1;;7;;;;;;;;;;;;;;2;;;4;;1;;9;;;;2;;3;;3;;;1;;;;;;;;;;;7;;;6;;3;;;5;;;;;1;8;9;;;5;2;6;\";\r\n    difficulty = \"hard\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    // easy games\r\n\r\n    id = 2;\r\n    st =\";;;;2;3;;;;;5;6;;;4;;1;2;;3;7;;;;;;5;;;2;;;;;6;;1;8;;;;;;9;7;;9;;;;;2;;;4;;;;;;8;3;;7;2;;3;;;6;5;;;;;6;9;;;;;\";\r\n    difficulty = \"easy\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    id = 7;  \r\n    st =\";9;6;;4;;;3;;;5;7;8;2;;;;;1;;;9;;;5;;;;;9;;1;;;;8;5;;;;;;;;2;4;;;;9;;6;;;;;4;;;3;;;1;;;;;7;9;2;6;;;2;;;5;;9;8;;\";\r\n    difficulty = \"medium\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    id = 5; \r\n    st =\"4;;;;9;;;7;;;;;2;;6;9;;;;;;;;7;;;2;3;8;;9;;;;;1;;2;4;;;;6;3;;9;;;;;3;;5;4;8;;;4;;;;;;;;1;6;;8;;;;;9;;;7;;;;5;\";\r\n    difficulty = \"easy\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    id = 8;  \r\n    st =\";;7;;;;9;;8;;3;;1;7;;;;4;;;;;;6;;;;6;9;8;7;4;;3;;;;;3;;1;;4;;;;;1;;3;9;7;6;2;;;;4;;;;;;9;;;;5;1;;4;;4;;5;;;;1;;;\";\r\n    difficulty = \"medium\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    id = 9;  \r\n    st =\";;;;;9;;;6;;;;;;3;8;5;1;;6;2;;1;5;;;;;;7;;;;;6;;;2;1;9;7;6;3;8;;;3;;;;;1;;;;;;4;5;;9;7;;2;5;8;6;;;;;;4;;;3;;;;;;\"; \r\n    difficulty = \"easy\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    id = 10;  \r\n    st =\"2;9;;;7;4;;;;;1;;;;;4;;;6;7;;9;;5;;;;;8;;2;;6;;;;;6;;8;4;7;;2;;;;;5;;1;;8;;;;;7;;8;;9;2;;;6;;;;;1;;;;;4;1;;;5;8;\"; \r\n    difficulty = \"easy\";\r\n    gameObj = { id: id, str: st, difficulty: difficulty };\r\n    stArr.push(gameObj);\r\n\r\n    return _.filter(stArr, { 'id': desiredId });\r\n}","import _ from \"underscore\";\r\n\r\n /**\r\n   * @param {string} id - id of the selected cell;\r\n   *                      i.e. cell at row 0, column 0 has an id = 00\r\n   *                      i.e. cell at row 1, column 1 has an id = 11\r\n   * \r\n   * @return {number} index - represeneting position of cell in array \r\n   *                          representation of grid\r\n*/\r\nexport function convertIdToIndex(id) {\r\n    let index = (parseInt(id[0]) - 1) * 9 + parseInt(id[1]) - 1;\r\n    return index;\r\n}\r\n\r\n /**\r\n   * @param {number, number} row, column - index of selected row / selected column\r\n   * \r\n   * @return {number} index - representing which subgrid we that row/column combo\r\n   *                          falls in; range [1, 9] inclusive;\r\n   *                          top-left = 1; bottom-right = 9;\r\n*/\r\nexport function getCubeIndex(row, column) {\r\n    let cube = null;\r\n    let rowDivision = Math.floor((row - 1) / 3);\r\n    let columnDivision = Math.floor((column - 1) / 3);\r\n    cube = rowDivision * 3 + columnDivision + 1;\r\n    return cube;\r\n}\r\n\r\nexport function getAllCellsInfo(cellValues) {\r\n    let count = 0;\r\n    let objArray = [];\r\n\r\n    cellValues.map(  value => {\r\n      let g = convertIndexToId(count, value);\r\n      objArray.push(g);\r\n      count++;\r\n    });\r\n\r\n    return objArray;\r\n}\r\n\r\nfunction convertIndexToId(index, value) {\r\n    let num = parseInt(index) + 1;\r\n    let division = Math.floor(num / 9) + 1;\r\n    let remainder = num % 9;\r\n    if (remainder === 0) {\r\n      division = division - 1;\r\n      remainder = 9;\r\n    }\r\n    value = parseInt(value) || 0;\r\n\r\n    let cube = getCubeIndex(division, remainder);\r\n    let obj = { row: division, column: remainder, cube: cube, value: value };\r\n    return obj;\r\n}\r\n\r\nexport function candidateValuesById(cellValues, id) {\r\n    let row = parseInt(id[0]);\r\n    let column = parseInt(id[1]);\r\n    let cube = getCubeIndex(row, column);\r\n    \r\n    return candidateValuesByRowColumnCube(cellValues, row, column, cube);\r\n}\r\n\r\nfunction candidateValuesByRowColumnCube(cellValues, row, column, cube) {\r\n    let allCells = getAllCellsInfo(cellValues);\r\n    // figure out what values are already entered in our\r\n    // row, column or cube\r\n    let known = getKnownValues(allCells, row, column, cube);\r\n    // return the difference\r\n    let candidates = _.difference([1,2,3,4,5,6,7,8,9], known.knownValues);\r\n\r\n    return candidates;\r\n}\r\n\r\nfunction getKnownValues(allCells, row, column, cube) {\r\n    let knownValues = []\r\n    let knownValuesObj = [];\r\n\r\n    allCells.map( cell => {\r\n        if (parseInt(cell.value) > 0) {\r\n            if (cell.row === row || cell.column === column || cell.cube === cube) {\r\n                let obj = {\r\n                    row: cell.row,\r\n                    column: cell.column,\r\n                    cube: cell.cube,\r\n                    value: cell.value\r\n                };\r\n\r\n                knownValues.push(cell.value);\r\n                knownValuesObj.push(obj);\r\n            }\r\n        }\r\n    });\r\n\r\n    return { knownValues, knownValuesObj };\r\n}\r\n\r\nexport function solveAlgo1(cellValues) {\r\n    // for every empty element in the grid\r\n    let allCells = getAllCellsInfo(cellValues);\r\n    let minFound = 9;\r\n    let results = [];\r\n    allCells.forEach(cell => {\r\n        if (cell.value === 0) {\r\n            let candidates = candidateValuesByRowColumnCube(cellValues, cell.row, cell.column, cell.cube);\r\n            if (candidates.length < minFound) {\r\n                minFound = candidates.length;\r\n                let temp = { cell: cell, candidates: candidates}\r\n                if (results.length > 0) {\r\n                    results.pop();\r\n                }\r\n                results.push(temp);\r\n            }\r\n        }\r\n        \r\n    });\r\n    return results;\r\n}\r\n\r\n /**\r\n   * @param {Object} CellValues - Object represeting state of our game\r\n   * \r\n   * @return {Object} GameInfo - object has fields for NumberOfEmptyCells,\r\n   *                             Complexity and Complexity-log\r\n*/\r\nexport function getGameInfo(cellValues) {\r\n    let allCells = getAllCellsInfo(cellValues);\r\n    let filledCells = 0;\r\n    let emptyCells = 0;\r\n    let complexity = 1;\r\n    allCells.map(cell => {\r\n        \r\n        if (cell.value > 0) {\r\n            filledCells++;\r\n        } else {\r\n            emptyCells++;\r\n            let candidates = candidateValuesByRowColumnCube(cellValues, cell.row, cell.column, cell.cube);\r\n            cell.candidates = [...candidates];\r\n            complexity = complexity * candidates.length;\r\n        }\r\n    });\r\n    let GameInfo = { cells: allCells, filledCells, emptyCells, complexity };\r\n    return GameInfo;\r\n}\r\n\r\nexport function solveAlgo2(cellValues) {\r\n    let gameInfo = getGameInfo(cellValues);\r\n    let allCellsWithCandidates = gameInfo.cells;\r\n    let foundCells = [];\r\n    let refs = [\"cube\", \"row\", \"column\"];\r\n\r\n    refs.map(ref => {\r\n        let simple9 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n        simple9.map(num => {\r\n            let res = checkCandidiatesDynamically(ref, num, allCellsWithCandidates);\r\n            if (res.length > 0) {\r\n                foundCells = [...foundCells, ...res]\r\n            }\r\n        })\r\n    });\r\n\r\n    return foundCells;\r\n}\r\n\r\n /**\r\n   * @param {string, number, Object} - possible constraint (i.e. row, column or cube),\r\n   *                                 - possible value (1-9 inclusive)\r\n   *                                 - Object for eact cell in grid of type\r\n   *   {row, column, cube, value, candidates}\r\n   * \r\n   * @return {Array} res - object has fields for NumberOfEmptyCells,\r\n   *                             Complexity and Complexity-log\r\n*/\r\nfunction checkCandidiatesDynamically(ref, refValue, allCellsWithCandidates) {\r\n    let count = [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    let storeObjArray = [];\r\n    let foundCellsObjArr = [];\r\n\r\n    allCellsWithCandidates.map(cell => {\r\n        if (!cell.value > 0) {\r\n            if (cell[ref] === refValue && cell.candidates !== undefined) {\r\n                cell.candidates.map(candidate => {\r\n                    count[candidate - 1] = count[candidate - 1] + 1;\r\n                    storeObjArray[candidate - 1] = cell;\r\n                })\r\n            }\r\n        }\r\n    });\r\n\r\n    let numb = -1;\r\n\r\n    count.map(elem => {\r\n        numb++;\r\n\r\n        if (elem === 1){\r\n            if (storeObjArray[numb]) {\r\n                let obj = { value: numb + 1, detail: storeObjArray[numb], constrainedBy: ref };\r\n                foundCellsObjArr.push(obj);\r\n            }\r\n        }\r\n    });\r\n\r\n    let results = [...foundCellsObjArr];\r\n    return results;\r\n}\r\n\r\nexport function validInput(cellValues, id, value) {\r\n    let candidates = candidateValuesById(cellValues, id);\r\n    if (candidates.indexOf(parseInt(value)) > -1) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n// called if valid input fails\r\n// returns id's of cells which conflict with desired input\r\nexport function getIdsOfConflictingCells(cellValues, id, value) {\r\n    let row = parseInt(id[0]);\r\n    let column = parseInt(id[1]);\r\n    let cube = getCubeIndex(row, column);\r\n    let idsOfConflictingCells = [];\r\n    let allCells = getAllCellsInfo(cellValues);\r\n\r\n    let known = getKnownValues(allCells, row, column, cube);\r\n    let knownValuesObj = known.knownValuesObj;\r\n\r\n    knownValuesObj.map( cell => {\r\n        if (cell.value === parseInt(value)) {\r\n            let conflictingRowNumber = cell.row;\r\n            let conflictingColumnNumber = cell.column;\r\n            let id = `${conflictingRowNumber}${conflictingColumnNumber}`;\r\n            idsOfConflictingCells.push(id);\r\n        }\r\n    });\r\n    \r\n    return idsOfConflictingCells;\r\n}\r\n\r\n\r\n// for all the empty cells in our grid\r\n// return an object -> { row, column, cube, value, candidatesArray }\r\nexport function solveAlgo3(cellValues) {\r\n    let gameInfo = getGameInfo(cellValues);\r\n    let allCellsWithCandidates = gameInfo.cells;\r\n    let foundCells = [];\r\n\r\n    allCellsWithCandidates.map(cell => {\r\n        if (cell.candidates !== undefined && cell.candidates.length > 0) {\r\n            foundCells.push(cell);\r\n        }\r\n    });\r\n\r\n    return foundCells;\r\n}\r\n\r\nexport function getAllCellsInfoCellsAsCSV(cellValues) {\r\n    let arrayOfStrings = []\r\n\r\n    cellValues.map(cell => {\r\n        if (cell.value === 0) {\r\n            arrayOfStrings.push('')\r\n        } else {\r\n            arrayOfStrings.push(cell.value.toString())\r\n        }\r\n    })\r\n\r\n    return arrayOfStrings\r\n}\r\n\r\nexport function isGameOver(cellValues) {\r\n    let gameInfo = getGameInfo(cellValues);\r\n    let allCellsWithCandidates = gameInfo.cells;\r\n    let gameOver = false;\r\n    allCellsWithCandidates.map(cell => {\r\n        if (cell.value === 0) {\r\n            let candidates = cell.candidates;\r\n            \r\n            if (candidates.length === 0 || candidates === []) {\r\n                gameOver = true;\r\n            }\r\n        }\r\n    });\r\n    return gameOver;\r\n}","import React from 'react'\r\n\r\nconst Settings = ({ highlightCells, setHighlightCells }) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <button \r\n                className='button is-success'\r\n                onClick={() => setHighlightCells(prev => !prev)}\r\n            >\r\n                Cell Highlighting - {highlightCells ? 'On' : 'Off'}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\nimport 'bulma/css/bulma.css'\nimport _ from \"underscore\";\n\nimport { confirmAlert } from \"react-confirm-alert\";\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\n\nimport Banner from './Components/Banner';\nimport Tools from './Components/Tools';\nimport Board from './Components/Board';\n\nimport GameInfo from \"./Components/GameInfo\";\nimport ConsoleRight from './Components/ConsoleRight';\n\nimport { getFirstValue, loadGameByDifficulty, getGameById } from './Controls/NewGame';\nimport { convertIdToIndex, getCubeIndex, getAllCellsInfo, candidateValuesById, getGameInfo, getAllCellsInfoCellsAsCSV,\n   solveAlgo1, solveAlgo2, solveAlgo3, validInput, getIdsOfConflictingCells, isGameOver } from './Controls/NewEngine';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Settings from \"./Components/Settings\";\n\nimport Confetti from 'react-confetti'\n\nfunction App() {\n\n  // tools state\n  const [solveEnabled, setSolvedEnabled] = React.useState(false);\n  const [hintsUsed, setHintsUsed] = React.useState(0);\n\n  // board state\n  const [cellBackgroundColors, setCellBackgroundColors] = React.useState(new Array(81).fill('bg-white'));\n  const [defaultColors] = React.useState(new Array(81).fill('bg-white'));\n  const [cellValues, setCellValues] = React.useState(new Array(81).fill('5'));\n  const [highlightCells, setHighlightCells] = React.useState(true);\n\n  // game info state\n  const [gameDifficulty, setGameDifficulty] = React.useState('easy');\n  const [gameId, setGameId] = React.useState(0);\n  const [complexity, setComplexity] = React.useState(null);\n  const [numberOfEmptyCells, setNumberOfEmptyCells] = React.useState();\n  const [gameActive, setGameActive] = React.useState(false);\n  const [idSelected, setIdSelected] = React.useState(null);\n  const [possibleValue, setPossibleValue] = React.useState('');\n  const [savedGame, setSavedGame] = React.useState(null);\n  const [virginGameId, setVirginGameId] = React.useState(null);\n  const [initialEmpty, setInitialEmpty] = React.useState();\n\n  // console right state\n  const [consoleMessage, setConsoleMessage] = React.useState('First Message');\n  const [gamesWon, setGamesWon] = React.useState(0)\n  const [markThisCellEnabled, setMarkThisCellEnabled] = React.useState(false);\n  const [showConfetti, setShowConfetti] = React.useState(false);\n\n  const [piecesAdded, setPiecesAdded] = React.useState([]);\n  \n  // tool props\n  const handleSolveClicked = () => {\n    let algo1Results = solveAlgo1(cellValues);\n\n    let cell = algo1Results[0].cell;\n    let candidates = algo1Results[0].candidates;\n\n    // algo 1\n    if (candidates.length === 1) {\n      let row = cell.row;\n      let column = cell.column;\n      let id = `${row}${column}`;\n      notify(`${candidates} is the only number that can go into (row: ${row}, column: ${column})`);\n      setHintsUsed(prev => prev + 1);\n      blinkCells([id], \"coral\");\n      changeCellValueById(id, candidates);\n    } \n\n    // try algo 2\n    else if (candidates.length > 1) {\n\n      let algo2Results = solveAlgo2(cellValues);\n      if (algo2Results.length >= 1) {\n        let value = algo2Results[0].value;\n        let detail = algo2Results[0].detail;\n        let constrainedBy = algo2Results[0].constrainedBy;\n\n        let row = detail.row;\n        let column = detail.column;\n        let id = `${row}${column}`;\n        notify(`although [${candidates.toString()}] can go into (row: ${row}, column: ${column}),\n                ${value} can only go in one place in this ${constrainedBy}`);\n        setHintsUsed(prev => prev + 1);\n        blinkCells([id], \"coral\");\n        changeCellValueById(id, value);\n      } \n    }\n  }\n  const newGame = () => {\n    // get valid starting game matrix from Controls\n    let gameObj = getFirstValue();\n    setGameDifficulty(gameObj.difficulty)\n    setGameId(gameObj.id)\n    // cast into array\n    let newArr = gameObj.str.split(';');\n    newArr.pop();\n    // use it to update our cell values state\n    setCellValues(newArr);\n    // reset colors\n    resetColors();\n    // save game so we can start over\n    saveVirginGame(gameObj);\n    // reset hints used\n    setHintsUsed(0);\n    // reset possibleValues\n    setPossibleValue('')\n  };\n  const resetColors = () => {\n    const colors = new Array(81).fill('bg-white');\n    setCellBackgroundColors(colors);\n  };\n  const startOver = () => {\n    let virginGame = getGameById(virginGameId);\n\n    // cast into array\n    let newArr = virginGame[0].str.split(';');\n    newArr.pop();\n    // use it to update our cell values state\n    setCellValues(newArr);\n    resetColors();\n    setStartOverEnabled(false);\n  };\n  const saveVirginGame = (gameObj) => {\n    setVirginGameId(gameObj.id);\n  };\n  const saveGame = () => {\n    let savedCells = getAllCellsInfo(cellValues);\n    let cellsFormatted = getAllCellsInfoCellsAsCSV(savedCells);\n    let emptyCells = numberOfEmptyCells;\n    let difficulty = gameDifficulty;\n    let savedGame = { cells: cellsFormatted, gameId, difficulty, emptyCells, complexity }\n    setSavedGame(savedGame);\n  };\n  const loadGame = () => {\n    let oldCellValues = savedGame.cells;\n    setCellValues(oldCellValues)\n    resetColors();\n  };\n\n  // board props\n  const handleChange = (e) => {\n    const id = e.target.id;\n    const value = e.target.value;\n    // handle valid input and backspace\n    if ((value > 0 && value < 10) || (value === \"\")){\n      // check if user input is valid entry for that position\n      if (validInput(cellValues, id, value)) {\n        if (!startOverEnabled) {\n          setStartOverEnabled(true)\n        }\n        changeCellValueById(id, value);\n        setPiecesAdded(prev => [...prev, value]);\n      } \n      // if not highlight the cells it conflicts with\n      else {\n        let idsInConflict = getIdsOfConflictingCells(cellValues, id, value);  \n        blinkCells(idsInConflict, \"red\");\n      }\n    } else {\n      toast.error(\n        `⚠ You inserted ${value}. Please enter a number between 1-9.`,  \n        {\n          position: 'top-right',\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        }\n      )\n    }\n  \n  }\n  const colorThese = (arrayOfIds, color) => {\n    if (arrayOfIds.length > 0) {\n      let colorCells = [...cellBackgroundColors];\n      arrayOfIds.map(id => {\n        let index = convertIdToIndex(id);\n        colorCells[index] = 'bg-' + color;\n      });\n      setCellBackgroundColors(colorCells);\n    }\n  }\n  const blinkCells = (arrayOfIds, color) => {\n    colorThese(arrayOfIds, color);\n    setTimeout(() => {\n      setCellBackgroundColors(defaultColors);\n    }, 1000);\n  }\n  const changeCellValueById = (id, value) => {\n    // spread in previous state into new array\n    let newCellValues = [...cellValues];\n    // get index of element we are updating value for\n    let indexNumber = convertIdToIndex(id); \n    // update value with user input\n    newCellValues[indexNumber] = value;\n    // update state\n    setCellValues(newCellValues);\n  }\n  const handleFocus = (e) => {\n    const id = e.target.id;\n    const value = e.target.value;\n\n    setIdSelected(id);\n\n    if (id) {\n      setMarkThisCellEnabled(true);\n    } \n\n    // color selected cell blue, constraining cells coral\n    if (highlightCells) {\n      colorConnectedCells(id, \"coral\");\n    }\n    showCellInfo(id, value);\n  }\n  const colorConnectedCells = (id, color) => {\n    // let index = convertIdToIndex(id);\n    // reset all cells to be white\n    let colorCells = new Array(81).fill('bg-white');\n\n    let row = parseInt(id[0]);\n    let column = parseInt(id[1]);\n\n    // function returns int, range 1-9, representing which subgrid we are focused on\n    // top-left being 1, bottom-right being 9\n    let cube = getCubeIndex(row, column);\n\n    // allCells => array of objects\n    // [{row: x, column: y: value: z}, ..., {row: x + 81, column: y + 81: value: n}]\n    let allCells = getAllCellsInfo(cellValues);\n    \n    let count = -1;\n\n    // iterate through every cell\n    allCells.map(cell => {\n      count++;\n      // only change color for cells in same row, same column, or same subgrid\n      if ( cell.row === row || cell.column === column || cell.cube === cube) {\n        // if we are in the same row, same column, and same subgrid\n        if (cell.row === row && cell.column === column && cell.cube === cube) {\n          // we are on focused cell -> set color to blue\n          colorCells[count] = \"bg-blue\";\n        } else {\n          // otherwise we are on 'constraining cells' -> set color to color passed into function\n          colorCells[count] = \"bg-\" + color;\n        }\n      }\n    });\n\n    // update state with new color array\n    setCellBackgroundColors(colorCells);\n  }\n  const showCellInfo = (id, value) => {\n    // if selected cell is filled\n    if (parseInt(value) > 0) {\n      return;\n    }\n    let candidates = candidateValuesById(cellValues, id);\n    setPossibleValue(candidates)\n  }\n  const markThisCell = () => {\n    if (idSelected !== null) {\n      // change color of that cell\n      const id = idSelected;\n      let colorCells = [...cellBackgroundColors];\n      let index = convertIdToIndex(id);\n      if (colorCells[index] === 'bg-white') {\n        colorCells[index] = \"bg-red\";\n      } else {\n        colorCells[index] = \"bg-white\";\n      }\n      setCellBackgroundColors(colorCells);\n    } else {\n      console.log('id selected is null');\n    }\n  }\n  const showAlert = () => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div>\n            <h1 style={{display: 'flex', justifyContent: 'center'}}><b>Choose Game By Difficulty</b></h1>\n            <div className='difficulty-options'>\n              <button className=\"button is-info\" onClick={() => {\n                getGameByDifficulty('easy')\n                onClose()\n              }} style={{margin: '5px'}}>\n                Easy\n              </button>\n              <button className=\"button is-warning\" onClick={() => {\n                getGameByDifficulty('medium')\n                onClose()\n              }} style={{margin: '5px'}}>\n                Medium\n              </button>\n              <button\n                className=\"button is-success\" onClick={() => {\n                  getGameByDifficulty('hard')\n                  onClose()\n                }} style={{margin: '5px'}}>\n                Hard\n              </button>\n            </div>\n            <div className='cancel-button' style={{display: 'grid'}}> \n              <button className=\"button is-danger\" onClick={onClose} style={{margin: '5px'}}>\n                Cancel\n              </button>\n            </div>\n          </div>\n        );\n      },\n    });\n  }\n  const getGameByDifficulty = (difficulty) => {\n    // get valid starting game matrix from Controls\n    let gameObj = loadGameByDifficulty(difficulty);\n    setGameDifficulty(gameObj.difficulty);\n    setGameId(gameObj.id)\n    // cast into array\n    let newArr = gameObj.str.split(';');\n    newArr.pop();\n    // use it to update our cell values state\n    setCellValues(newArr);\n    // reset colors\n    resetColors();\n  }\n\n  // console right props\n  const handleShowFound = () => {\n    let piecesFound = `${piecesAdded}`\n    setConsoleMessage(piecesFound)\n  }\n  \n  const [startOverEnabled, setStartOverEnabled] = React.useState(false)\n\n  React.useEffect(() => {\n    // load random game\n    newGame();\n    let { emptyCells } = getGameInfo(cellValues);\n    setInitialEmpty(emptyCells);\n  }, []);\n\n  React.useEffect(() => {\n    if (!highlightCells) {\n      setCellBackgroundColors(new Array(81).fill('bg-white'));\n    }\n  }, [highlightCells])\n\n  React.useEffect(() => {\n    // get game info\n    let { emptyCells, complexity } = getGameInfo(cellValues);\n\n    // use game info to update state\n    setNumberOfEmptyCells(emptyCells);\n    setComplexity(complexity);\n    if (emptyCells !== 0) {\n      setSolvedEnabled(true)\n    } else {\n      setSolvedEnabled(false)\n    }\n\n    if (initialEmpty !== emptyCells) {\n      setGameActive(true)\n    }\n    \n    // check if we have beat the game\n    if (gameActive && emptyCells === 0) {\n      toast.success(\n        `Congratulations! You Won!`, \n        {\n          position: 'top-right',\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        }\n      );\n      setShowConfetti(true);\n      setTimeout(() => {\n        setShowConfetti(false)\n      }, 5000)\n      setGamesWon(prev => prev + 1)\n      setTimeout(() => {\n        newGame()\n      }, 3000)\n      \n    }\n    \n  }, [cellValues])\n\n  React.useEffect(() => { \n    // check if we lost\n    let haveWeLost = isGameOver(cellValues);\n\n    if (haveWeLost) {\n      toast.error(\n        `HAHA! You Lost!`, \n        {\n          position: 'top-right',\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        }\n      );\n      setShowConfetti(true);\n      setTimeout(() => {\n        setShowConfetti(false)\n      }, 5000)\n      setTimeout(() => {\n        newGame()\n      }, 3000)\n    }\n      \n  }, [cellValues])\n\n  const notify = (message=\"🦄 Wow so easy!\") => {\n    toast(\n      `${message}`, \n      {\n        position: 'top-right',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true\n      }\n    )\n  }\n\n  const [showCandidates, setShowCandidates] = React.useState(false);\n\n  const handleShowCandidatesClicked = () => {\n    setShowCandidates(prev => !prev);\n  }\n\n  return (\n    <>\n      {/** POPUP COMPONENT **/}\n      <ToastContainer />\n      {\n        showConfetti &&\n        <Confetti />\n      }\n      {/** END OF POPUP COMPONENT **/}\n      <section className=\"hero is-fullheight\">\n        <div className=\"container is-fluid\">\n          {/** BANNER **/}\n          <Banner /> \n          {/** TOOLS **/}\n          <div className=\"container\">\n            <Tools \n              solve={handleSolveClicked} \n              solveEnabled={solveEnabled} \n              newGame={newGame} \n              startOver={startOver} \n              startOverEnabled={startOverEnabled}\n              markThisCell={markThisCell}\n              markThisCellEnabled={markThisCellEnabled}\n              showAlert={showAlert}\n              saveGame={saveGame}\n              loadGame={loadGame}\n              loadEnabled={savedGame}\n              handleShowCandidatesClicked={handleShowCandidatesClicked}\n              showCandidates={showCandidates}\n            />\n          </div>\n          {/** MAIN CONTENT **/}\n          <div className=\"container\">\n            <div className=\"columns\">\n              {/** BOARD **/}\n              <div className=\"column\">\n                <Board  \n                  handleChange={handleChange}\n                  handleFocus={handleFocus}\n                  cellValues={cellValues}\n                  cellBackgroundColors={cellBackgroundColors}\n                />\n      \n                <Settings\n                  highlightCells={highlightCells}\n                  setHighlightCells={setHighlightCells}\n                />\n\n              </div>\n              {/** END OF BOARD **/}\n\n              {/** GAME INFO **/}\n              <div className=\"column\">\n                <GameInfo\n                  gameId={gameId}\n                  gameDifficulty={gameDifficulty}\n                  complexity={complexity}\n                  numberOfEmptyCells={numberOfEmptyCells}\n                />\n\n              </div>\n              {/** END OF GAME INFO **/}\n\n              {/** GAME STATISTICS **/}\n              <div className=\"column\">\n                <div className=\"columns\">\n                  <div className=\"row\">\n                    <div className=\"column\">\n\n                      <ConsoleRight\n                        consoleMessage={consoleMessage}\n                        gamesWon={gamesWon}\n                        showFound={handleShowFound}\n                        hintsUsed={hintsUsed}\n                        showCandidates={showCandidates}\n                        candidates={possibleValue}\n                      />\n\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {/** END OF GAME STATISTICS **/}\n            </div>\n          </div>\n          {/** END OF MAIN CONTENT **/}  \n        </div>\n        {/** END OF CONTAINER **/} \n\n        {/** FOOTER **/}\n        <footer className=\"footer\">\n          <div className=\"content has-text-centered\">\n            <p>Sudoku - <b>Enrique Sotomayor</b> - 2020</p>\n          </div>\n        </footer>\n        {/** END OF FOOTER **/}\n      </section>\n      {/** END OF SECTION **/} \n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}